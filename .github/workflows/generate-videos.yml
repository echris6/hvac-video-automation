name: Generate Website Videos

# Updated workflow with workflow_dispatch trigger for n8n integration
on:
  workflow_dispatch:
    inputs:
      html_content:
        description: 'HTML content to record'
        required: true
        type: string
      business_name:
        description: 'Business name'
        required: true
        type: string
      business_niche:
        description: 'Business niche (medical_spa, hvac, real_estate)'
        required: true
        type: string

permissions:
  contents: write
  actions: read

jobs:
  generate-videos:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install system dependencies and Puppeteer requirements
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ffmpeg \
          wget \
          ca-certificates \
          fonts-liberation \
          libappindicator3-1 \
          libasound2t64 \
          libatk-bridge2.0-0 \
          libatk1.0-0 \
          libc6 \
          libcairo2 \
          libcups2 \
          libdbus-1-3 \
          libexpat1 \
          libfontconfig1 \
          libgcc-s1 \
          libgdk-pixbuf2.0-0 \
          libglib2.0-0 \
          libgtk-3-0 \
          libnspr4 \
          libnss3 \
          libpango-1.0-0 \
          libpangocairo-1.0-0 \
          libstdc++6 \
          libx11-6 \
          libx11-xcb1 \
          libxcb1 \
          libxcomposite1 \
          libxcursor1 \
          libxdamage1 \
          libxext6 \
          libxfixes3 \
          libxi6 \
          libxrandr2 \
          libxrender1 \
          libxss1 \
          libxtst6 \
          libxkbcommon0 \
          libdrm2 \
          libgbm1 \
          libpulse0 \
          libasound2-data \
          xdg-utils

    - name: Install Google Chrome
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Install Node.js dependencies
      run: |
        echo "üì¶ Installing Node.js dependencies..."
        npm ci --prefer-offline
        echo "‚úÖ Dependencies installed successfully"

    - name: Setup Xvfb for headless display
      run: |
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        sleep 3

    - name: Clean up previous videos and create fresh directory
      run: |
        echo "üßπ Cleaning up videos from previous runs..."
        rm -rf videos/ frames/
        mkdir -p videos/ frames/
        echo "‚úÖ Created fresh videos/ and frames/ directories"

    - name: Generate video with animation-free HTML
      run: |
        echo "üé¨ Starting video generation with animation-free HTML..."
        echo "üìã Business: ${{ github.event.inputs.business_name }}"
        echo "üè¢ Niche: ${{ github.event.inputs.business_niche }}"
        echo "üìÑ HTML Length: ${#HTML_CONTENT} characters"
        
        # Start the updated server that accepts HTML content directly
        echo "üöÄ Starting server-medical-spa-test.js on port 3020..."
        node server-medical-spa-test.js &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test server health
        echo "ü©∫ Testing server health..."
        if curl -f http://localhost:3020/health; then
          echo "‚úÖ Server is healthy"
        else
          echo "‚ùå Server health check failed"
          exit 1
        fi
        
        # Create JSON payload file to handle large HTML content safely
        echo "üìù Creating request payload..."
        node -e "
        const fs = require('fs');
        const businessName = process.env.BUSINESS_NAME;
        const niche = process.env.BUSINESS_NICHE;
        const htmlContent = process.env.HTML_CONTENT;
        
        const payload = {
          businessName: businessName,
          niche: niche,
          htmlContent: htmlContent
        };
        
        fs.writeFileSync('request_payload.json', JSON.stringify(payload, null, 2));
        console.log('‚úÖ Request payload created successfully');
        console.log('üìä Payload size:', JSON.stringify(payload).length, 'bytes');
        "
        
        # Generate video with animation-free HTML
        echo "üé• Generating video with animation-free HTML..."
        response=$(curl -s -w "%{http_code}" -X POST http://localhost:3020/generate-video \
          -H "Content-Type: application/json" \
          -d @request_payload.json)
        
        http_code=$(echo "$response" | tail -n1)
        response_body=$(echo "$response" | sed '$d')
        
        echo "üì° HTTP Response Code: $http_code"
        echo "üìã Response Body: $response_body"
        
        if [ "$http_code" != "200" ]; then
          echo "‚ùå Video generation failed with HTTP $http_code"
          echo "Response: $response_body"
          exit 1
        fi
        
        # Clean up
        kill $SERVER_PID 2>/dev/null || true
        rm -f request_payload.json
        
        # Verify video was generated
        if [ -d "videos" ]; then
          VIDEO_COUNT=$(find videos -name "*.mp4" | wc -l)
          echo "üìä Generated $VIDEO_COUNT video(s)"
          
          if [ "$VIDEO_COUNT" -eq 1 ]; then
            find videos -name "*.mp4" -exec ls -lh {} \;
            echo "‚úÖ Video generation completed successfully!"
          else
            echo "‚ùå Expected 1 video, found $VIDEO_COUNT"
            exit 1
          fi
        else
          echo "‚ùå Videos directory not found"
          exit 1
        fi
      timeout-minutes: 30
      env:
        NODE_ENV: production
        PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable
        DISPLAY: :99
        BUSINESS_NAME: ${{ github.event.inputs.business_name }}
        BUSINESS_NICHE: ${{ github.event.inputs.business_niche }}
        HTML_CONTENT: ${{ github.event.inputs.html_content }}

    - name: Create workflow summary
      run: |
        echo "# üé¨ Video Generation Summary" > workflow-summary.md
        echo "" >> workflow-summary.md
        echo "**Generated at:** $(date -u)" >> workflow-summary.md
        echo "**Triggered by:** n8n via workflow_dispatch API" >> workflow-summary.md
        echo "**Business:** ${{ github.event.inputs.business_name }}" >> workflow-summary.md
        echo "**Niche:** ${{ github.event.inputs.business_niche }}" >> workflow-summary.md
        echo "**HTML Content:** Animation-free template" >> workflow-summary.md
        echo "" >> workflow-summary.md
        
        if [ -d "videos" ]; then
          VIDEO_COUNT=$(find videos -name "*.mp4" | wc -l)
          echo "**Videos generated:** $VIDEO_COUNT" >> workflow-summary.md
          echo "" >> workflow-summary.md
          
          if [ "$VIDEO_COUNT" -gt 0 ]; then
            echo "## üìπ Generated Videos:" >> workflow-summary.md
            find videos -name "*.mp4" | while read video; do
              size=$(ls -lh "$video" | awk '{print $5}')
              filename=$(basename "$video")
              echo "- \`$filename\` ($size)" >> workflow-summary.md
            done
          fi
        else
          echo "**Videos generated:** 0" >> workflow-summary.md
        fi
        
        cat workflow-summary.md

    - name: Commit and push generated video
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Fetch latest changes
        git fetch origin main
        
        # Add generated files
        git add videos/ workflow-summary.md || true
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è No changes to commit"
          exit 0
        fi
        
        echo "üíæ Committing animation-free video..."
        git commit -m "üé• Generated animation-free website video

        Generated at: $(date -u)
        Business: ${{ github.event.inputs.business_name }}
        Niche: ${{ github.event.inputs.business_niche }}
        Template: Animation-free from n8n
        Server: server-medical-spa-test.js (accepts HTML directly)
        Result: Stable video with no hero glitching üéØ"
        
        # Push with retry logic
        MAX_RETRIES=3
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "üì§ Push attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES..."
          
          if git push origin HEAD:main; then
            echo "‚úÖ Successfully pushed animation-free video to repository!"
            break
          else
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              git pull --rebase origin main
              sleep 5
            else
              echo "‚ùå Max retries reached. Push failed."
              exit 1
            fi
          fi
        done

    - name: Upload video as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: animation-free-video-${{ github.event.inputs.business_niche }}-${{ github.run_number }}
        path: |
          videos/
          workflow-summary.md
        retention-days: 30 