name: Generate Website Videos

on:
  repository_dispatch:
    types: [generate_websites]

permissions:
  contents: write
  actions: read

jobs:
  generate-videos:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install system dependencies and Puppeteer requirements
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ffmpeg \
          wget \
          ca-certificates \
          fonts-liberation \
          libappindicator3-1 \
          libasound2t64 \
          libatk-bridge2.0-0 \
          libatk1.0-0 \
          libc6 \
          libcairo2 \
          libcups2 \
          libdbus-1-3 \
          libexpat1 \
          libfontconfig1 \
          libgcc-s1 \
          libgdk-pixbuf2.0-0 \
          libglib2.0-0 \
          libgtk-3-0 \
          libnspr4 \
          libnss3 \
          libpango-1.0-0 \
          libpangocairo-1.0-0 \
          libstdc++6 \
          libx11-6 \
          libx11-xcb1 \
          libxcb1 \
          libxcomposite1 \
          libxcursor1 \
          libxdamage1 \
          libxext6 \
          libxfixes3 \
          libxi6 \
          libxrandr2 \
          libxrender1 \
          libxss1 \
          libxtst6 \
          libxkbcommon0 \
          libdrm2 \
          libgbm1 \
          libpulse0 \
          libasound2-data \
          xdg-utils

    - name: Install Google Chrome
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Install Node.js dependencies
      run: npm install

    - name: Process n8n website payload
      run: |
        echo "üîç Processing website from n8n..."
        echo "Payload received: $PAYLOAD"
        
        # Ensure .github/scripts directory exists
        mkdir -p .github/scripts
        
        if [ -z "$PAYLOAD" ] || [ "$PAYLOAD" = "null" ]; then
          echo "‚ùå No payload provided from n8n"
          exit 1
        else
          echo "‚úÖ Processing website data..."
          node .github/scripts/process-payload.js
        fi
        
        # Verify processing was successful
        if [ ! -f ".github/scripts/processing-results.json" ]; then
          echo "‚ùå Failed to process website data"
          exit 1
        fi
        
        echo "üìã Processing results:"
        cat .github/scripts/processing-results.json
      env:
        PAYLOAD: ${{ toJson(github.event.client_payload) }}
        NODE_ENV: production

    - name: Setup Xvfb for headless display
      run: |
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        sleep 3

    - name: Clean up previous videos and create fresh directory
      run: |
        echo "üßπ Cleaning up videos from previous runs..."
        
        # Show what exists before cleanup
        if [ -d "videos" ]; then
          BEFORE_COUNT=$(find videos -name "*.mp4" 2>/dev/null | wc -l)
          echo "üìä Found $BEFORE_COUNT existing video(s) before cleanup"
          if [ "$BEFORE_COUNT" -gt 0 ]; then
            echo "üóÇÔ∏è Existing videos:"
            find videos -name "*.mp4" -exec basename {} \; 2>/dev/null || echo "None"
          fi
        else
          echo "üìä No videos directory exists yet"
        fi
        
        # Remove all previous videos to ensure fresh generation
        rm -rf videos/
        rm -rf frames/
        rm -rf websites/
        
        # Create fresh directories
        mkdir -p videos/
        mkdir -p frames/
        
        # Verify cleanup
        AFTER_COUNT=$(find videos -name "*.mp4" 2>/dev/null | wc -l)
        echo "‚úÖ Created fresh videos/ and frames/ directories"
        echo "üìä Videos after cleanup: $AFTER_COUNT (should be 0)"
        echo "üéØ Ready for fresh video generation - exactly 1 video will be created"

    - name: Generate video using screenshot-based method
      run: |
        echo "üé¨ Starting fresh video generation for n8n website..."
        echo "Environment:"
        echo "  NODE_ENV: $NODE_ENV"
        echo "  PUPPETEER_EXECUTABLE_PATH: $PUPPETEER_EXECUTABLE_PATH"
        echo "  DISPLAY: $DISPLAY"
        
        # Verify cleanup worked
        echo "üîç Verifying clean state..."
        if [ -d "videos" ]; then
          EXISTING_VIDEOS=$(find videos -name "*.mp4" | wc -l)
          echo "üìä Found $EXISTING_VIDEOS existing videos (should be 0)"
          if [ "$EXISTING_VIDEOS" -gt 0 ]; then
            echo "‚ö†Ô∏è Warning: Found existing videos, cleaning again..."
            rm -rf videos/*.mp4
          fi
        fi
        
        # Check if we have website data to process
        if [ -f ".github/scripts/processing-results.json" ]; then
          WEBSITE_COUNT=$(jq length .github/scripts/processing-results.json)
          echo "üìä Found $WEBSITE_COUNT website(s) to process"
          
          # Ensure we only process 1 website
          if [ "$WEBSITE_COUNT" -gt 1 ]; then
            echo "‚ö†Ô∏è Multiple websites found - will process only the first one"
          fi
          
          if [ "$WEBSITE_COUNT" -gt 0 ]; then
            echo "üöÄ Running screenshot-based video generation for 1 website only..."
            node .github/scripts/generate-videos.js
            
            echo "üìÅ Verifying fresh video generation..."
            if [ -d "videos" ]; then
              echo "Videos directory contents:"
              ls -la videos/
              VIDEO_COUNT=$(find videos -name "*.mp4" | wc -l)
              echo "Generated $VIDEO_COUNT video file(s) (should be exactly 1)"
              
              if [ "$VIDEO_COUNT" -eq 1 ]; then
                echo "‚úÖ Perfect! Generated exactly 1 fresh video!"
                find videos -name "*.mp4" -exec ls -lh {} \;
              elif [ "$VIDEO_COUNT" -gt 1 ]; then
                echo "‚ö†Ô∏è Warning: Generated $VIDEO_COUNT videos, expected 1"
                find videos -name "*.mp4" -exec ls -lh {} \;
              else
                echo "‚ùå No video files found after generation"
                exit 1
              fi
            else
              echo "‚ùå Videos directory not found"
              exit 1
            fi
          else
            echo "‚ùå No website data to process"
            exit 1
          fi
        else
          echo "‚ùå No processing results found"
          exit 1
        fi
        
        echo "‚úÖ Fresh video generation completed successfully"
      timeout-minutes: 30
      env:
        NODE_ENV: production
        PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable
        DISPLAY: :99

    - name: Create workflow summary
      run: |
        echo "# üé¨ Video Generation Summary" > workflow-summary.md
        echo "" >> workflow-summary.md
        echo "**Generated at:** $(date -u)" >> workflow-summary.md
        echo "**Triggered by:** n8n via repository_dispatch" >> workflow-summary.md
        echo "" >> workflow-summary.md
        
        if [ -d "videos" ]; then
          VIDEO_COUNT=$(find videos -name "*.mp4" | wc -l)
          echo "**Videos generated:** $VIDEO_COUNT" >> workflow-summary.md
          echo "" >> workflow-summary.md
          
          if [ "$VIDEO_COUNT" -gt 0 ]; then
            echo "## üìπ Generated Videos:" >> workflow-summary.md
            find videos -name "*.mp4" | while read video; do
              size=$(ls -lh "$video" | awk '{print $5}')
              filename=$(basename "$video")
              echo "- \`$filename\` ($size)" >> workflow-summary.md
            done
          fi
        else
          echo "**Videos generated:** 0" >> workflow-summary.md
        fi
        
        cat workflow-summary.md

    - name: Commit and push fresh generated video
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Fetch latest changes
        echo "üì° Fetching latest changes..."
        git fetch origin main
        
        # Verify we have exactly 1 fresh video
        if [ -d "videos" ]; then
          VIDEO_COUNT=$(find videos -name "*.mp4" | wc -l)
          echo "üìä Found $VIDEO_COUNT video(s) to commit"
          if [ "$VIDEO_COUNT" -ne 1 ]; then
            echo "‚ö†Ô∏è Expected exactly 1 video, found $VIDEO_COUNT"
          fi
        fi
        
        # Add generated files
        git add videos/ || true
        git add workflow-summary.md || true
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è No changes to commit"
          exit 0
        fi
        
        echo "üíæ Committing fresh generated video..."
        
        # Create commit
        git commit -m "üé• Generated fresh website video from n8n

        Generated at: $(date -u)
        Triggered by: n8n repository_dispatch
        Event type: generate_websites
        Videos: 1 fresh video (previous videos cleaned)"
        
        # Push with retry logic
        MAX_RETRIES=3
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "üì§ Push attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES..."
          
          if git push origin HEAD:main; then
            echo "‚úÖ Successfully pushed video to repository!"
            break
          else
            echo "‚ùå Push failed, syncing with remote..."
            RETRY_COUNT=$((RETRY_COUNT + 1))
            
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              # Reset and pull latest changes
              git reset --soft HEAD~1
              git stash push -m "Generated video from n8n"
              git pull --rebase origin main
              git stash pop || true
              
              # Re-add and commit
              git add videos/ workflow-summary.md || true
              git commit -m "üé• Generated website video from n8n

              Generated at: $(date -u)
              Triggered by: n8n repository_dispatch (retry $((RETRY_COUNT + 1)))" || {
                echo "No changes to re-commit after rebase"
                break
              }
              
              sleep 5
            else
              echo "‚ùå Max retries reached. Push failed."
              exit 1
            fi
          fi
        done

    - name: Upload video as artifact (backup)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: generated-video-${{ github.run_number }}
        path: |
          videos/
          workflow-summary.md
        retention-days: 30 