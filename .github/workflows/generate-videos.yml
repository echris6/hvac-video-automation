name: Generate Website Videos

# Updated workflow with workflow_dispatch trigger for n8n integration
on:
  repository_dispatch:
    types: [generate_websites]
  workflow_dispatch:
    inputs:
      html_content:
        description: 'HTML content to record'
        required: true
        type: string
      business_name:
        description: 'Business name'
        required: true
        type: string
      industry:
        description: 'Industry type'
        required: true
        type: choice
        options:
          - 'Medical Spa'
          - 'Real Estate'
          - 'HVAC Services'
      template:
        description: 'Template to use'
        required: true
        type: choice
        options:
          - 'medical_spa'
          - 'real_estate'
          - 'hvac'
      workflow_id:
        description: 'Unique workflow ID'
        required: true
        type: string

permissions:
  contents: write
  actions: read

jobs:
  generate-videos:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install system dependencies and Puppeteer requirements
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ffmpeg \
          wget \
          ca-certificates \
          fonts-liberation \
          libappindicator3-1 \
          libasound2t64 \
          libatk-bridge2.0-0 \
          libatk1.0-0 \
          libc6 \
          libcairo2 \
          libcups2 \
          libdbus-1-3 \
          libexpat1 \
          libfontconfig1 \
          libgcc-s1 \
          libgdk-pixbuf2.0-0 \
          libglib2.0-0 \
          libgtk-3-0 \
          libnspr4 \
          libnss3 \
          libpango-1.0-0 \
          libpangocairo-1.0-0 \
          libstdc++6 \
          libx11-6 \
          libx11-xcb1 \
          libxcb1 \
          libxcomposite1 \
          libxcursor1 \
          libxdamage1 \
          libxext6 \
          libxfixes3 \
          libxi6 \
          libxrandr2 \
          libxrender1 \
          libxss1 \
          libxtst6 \
          libxkbcommon0 \
          libdrm2 \
          libgbm1 \
          libpulse0 \
          libasound2-data \
          xdg-utils

    - name: Install Google Chrome
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Install Node.js dependencies
      run: |
        echo "üì¶ Installing Node.js dependencies..."
        npm ci --prefer-offline
        echo "‚úÖ Dependencies installed successfully"

    - name: Process workflow inputs
      run: |
        echo "üîç Processing workflow inputs..."
        echo "Trigger event: ${{ github.event_name }}"
        
        # Ensure .github/scripts directory exists
        mkdir -p .github/scripts
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "‚úÖ Processing workflow_dispatch inputs..."
          
          # Safely create HTML file from input using heredoc to avoid shell character issues
          # The quoted delimiter 'WORKFLOW_HTML_CONTENT_EOF' prevents variable expansion
          # and treats all content literally, safely handling <, >, ", ', (, ), &, etc.
          echo "üìÑ Creating HTML file safely with heredoc method..."
          
          # Use environment variable method to safely handle HTML content
          echo "üìù Writing HTML content using environment variable method..."
          export HTML_CONTENT='${{ github.event.inputs.html_content }}'
          printf '%s' "$HTML_CONTENT" > website.html || {
            echo "‚ùå Failed to create HTML file"
            exit 1
          }
          echo "‚úÖ HTML content written successfully"
          
          # Verify HTML file was created successfully
          if [ -f "website.html" ] && [ -s "website.html" ]; then
            HTML_SIZE=$(wc -c < website.html)
            echo "‚úÖ HTML content saved to website.html ($HTML_SIZE bytes)"
            
            # Show first 200 characters for verification (truncated for logs)
            echo "üìã HTML preview:"
            head -c 200 website.html | tr -d '\0' || echo "(binary content detected)"
            echo ""
            echo "... (truncated)"
          else
            echo "‚ùå Failed to create HTML file or file is empty"
            exit 1
          fi
          
          # Create processing results for workflow_dispatch
          echo "üìù Creating processing results JSON..."
          cat > .github/scripts/processing-results.json << 'JSON_EOF'
          [
            {
              "business_name": "${{ github.event.inputs.business_name }}",
              "industry": "${{ github.event.inputs.industry }}",
              "template": "${{ github.event.inputs.template }}",
              "workflow_id": "${{ github.event.inputs.workflow_id }}",
              "html_file": "website.html"
            }
          ]
          JSON_EOF
          
        elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "‚úÖ Processing repository_dispatch payload..."
          
          if [ -z "$PAYLOAD" ] || [ "$PAYLOAD" = "null" ]; then
            echo "‚ùå No payload provided from n8n"
            exit 1
          else
            echo "‚úÖ Processing website data..."
            node .github/scripts/process-payload.js
          fi
          
        else
          echo "‚ùå Unsupported trigger event: ${{ github.event_name }}"
          exit 1
        fi
        
        # Verify processing was successful
        if [ ! -f ".github/scripts/processing-results.json" ]; then
          echo "‚ùå Failed to process website data"
          exit 1
        fi
        
        echo "üìã Processing results:"
        cat .github/scripts/processing-results.json
      env:
        PAYLOAD: ${{ toJson(github.event.client_payload) }}
        NODE_ENV: production

    - name: Setup Xvfb for headless display
      run: |
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        sleep 3

    - name: Clean up previous videos and create fresh directory
      run: |
        echo "üßπ Cleaning up videos from previous runs..."
        
        # Show what exists before cleanup
        if [ -d "videos" ]; then
          BEFORE_COUNT=$(find videos -name "*.mp4" 2>/dev/null | wc -l)
          echo "üìä Found $BEFORE_COUNT existing video(s) before cleanup"
          if [ "$BEFORE_COUNT" -gt 0 ]; then
            echo "üóÇÔ∏è Existing videos:"
            find videos -name "*.mp4" -exec basename {} \; 2>/dev/null || echo "None"
          fi
        else
          echo "üìä No videos directory exists yet"
        fi
        
        # Remove all previous videos to ensure fresh generation
        rm -rf videos/
        rm -rf frames/
        rm -rf websites/
        
        # Create fresh directories
        mkdir -p videos/
        mkdir -p frames/
        
        # Verify cleanup
        AFTER_COUNT=$(find videos -name "*.mp4" 2>/dev/null | wc -l)
        echo "‚úÖ Created fresh videos/ and frames/ directories"
        echo "üìä Videos after cleanup: $AFTER_COUNT (should be 0)"
        echo "üéØ Ready for fresh video generation - exactly 1 video will be created"

    - name: Generate video using screenshot-based method
      run: |
        echo "üé¨ Starting fresh video generation..."
        echo "Trigger: ${{ github.event_name }}"
        echo "Environment:"
        echo "  NODE_ENV: $NODE_ENV"
        echo "  PUPPETEER_EXECUTABLE_PATH: $PUPPETEER_EXECUTABLE_PATH"
        echo "  DISPLAY: $DISPLAY"
        
        # Verify cleanup worked
        echo "üîç Verifying clean state..."
        if [ -d "videos" ]; then
          EXISTING_VIDEOS=$(find videos -name "*.mp4" | wc -l)
          echo "üìä Found $EXISTING_VIDEOS existing videos (should be 0)"
          if [ "$EXISTING_VIDEOS" -gt 0 ]; then
            echo "‚ö†Ô∏è Warning: Found existing videos, cleaning again..."
            rm -rf videos/*.mp4
          fi
        fi
        
        # Check if we have website data to process
        if [ -f ".github/scripts/processing-results.json" ]; then
          WEBSITE_COUNT=$(jq length .github/scripts/processing-results.json)
          echo "üìä Found $WEBSITE_COUNT website(s) to process"
          
          # Ensure we only process 1 website
          if [ "$WEBSITE_COUNT" -gt 1 ]; then
            echo "‚ö†Ô∏è Multiple websites found - will process only the first one"
          fi
          
          if [ "$WEBSITE_COUNT" -gt 0 ]; then
            echo "üöÄ Running screenshot-based video generation for 1 website only..."
            
            # Handle different trigger types for video generation
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "üìù Using workflow_dispatch inputs for video generation..."
              
              # Verify the HTML file exists and is readable
              if [ ! -f "website.html" ] || [ ! -s "website.html" ]; then
                echo "‚ùå HTML file missing or empty, cannot proceed"
                exit 1
              fi
              
              # Run the appropriate server based on template with custom HTML
              case "${{ github.event.inputs.template }}" in
                "hvac")
                  echo "üîß Running HVAC video generation with custom HTML..."
                  # Backup original and use custom HTML
                  [ -f "hvac.html" ] && cp hvac.html hvac.html.backup
                  cp website.html hvac.html
                  
                  node server-hvac-step5.js &
                  SERVER_PID=$!
                  sleep 5
                  curl -X POST http://localhost:3025/generate-video \
                    -H "Content-Type: application/json" \
                    -d "{\"businessName\":\"${{ github.event.inputs.business_name }}\",\"niche\":\"hvac\"}"
                  kill $SERVER_PID 2>/dev/null || true
                  
                  # Restore original if backup exists
                  [ -f "hvac.html.backup" ] && mv hvac.html.backup hvac.html
                  ;;
                "medical_spa")
                  echo "üíâ Running Medical Spa video generation with custom HTML..."
                  # Backup original and use custom HTML
                  [ -f "lux.html" ] && cp lux.html lux.html.backup
                  cp website.html lux.html
                  
                  node server-medical-spa-test.js &
                  SERVER_PID=$!
                  sleep 5
                  curl -X POST http://localhost:3020/generate-video \
                    -H "Content-Type: application/json" \
                    -d "{\"businessName\":\"${{ github.event.inputs.business_name }}\",\"niche\":\"medical_spa\"}"
                  kill $SERVER_PID 2>/dev/null || true
                  
                  # Restore original if backup exists
                  [ -f "lux.html.backup" ] && mv lux.html.backup lux.html
                  ;;
                "real_estate")
                  echo "üè† Running Real Estate video generation with custom HTML..."
                  # Backup original and use custom HTML
                  [ -f "testttt.html" ] && cp testttt.html testttt.html.backup
                  cp website.html testttt.html
                  
                  node server-step5-tour.js &
                  SERVER_PID=$!
                  sleep 5
                  curl -X POST http://localhost:3005/generate-video \
                    -H "Content-Type: application/json" \
                    -d "{\"businessName\":\"${{ github.event.inputs.business_name }}\",\"niche\":\"real_estate\"}"
                  kill $SERVER_PID 2>/dev/null || true
                  
                  # Restore original if backup exists
                  [ -f "testttt.html.backup" ] && mv testttt.html.backup testttt.html
                  ;;
                *)
                  echo "‚ùå Unknown template: ${{ github.event.inputs.template }}"
                  exit 1
                  ;;
              esac
            else
              echo "üìù Using repository_dispatch payload for video generation..."
              node .github/scripts/generate-videos.js
            fi
            
            echo "üìÅ Verifying fresh video generation..."
            if [ -d "videos" ]; then
              echo "Videos directory contents:"
              ls -la videos/
              VIDEO_COUNT=$(find videos -name "*.mp4" | wc -l)
              echo "Generated $VIDEO_COUNT video file(s) (should be exactly 1)"
              
              if [ "$VIDEO_COUNT" -eq 1 ]; then
                echo "‚úÖ Perfect! Generated exactly 1 fresh video!"
                find videos -name "*.mp4" -exec ls -lh {} \;
              elif [ "$VIDEO_COUNT" -gt 1 ]; then
                echo "‚ö†Ô∏è Warning: Generated $VIDEO_COUNT videos, expected 1"
                find videos -name "*.mp4" -exec ls -lh {} \;
              else
                echo "‚ùå No video files found after generation"
                exit 1
              fi
            else
              echo "‚ùå Videos directory not found"
              exit 1
            fi
          else
            echo "‚ùå No website data to process"
            exit 1
          fi
        else
          echo "‚ùå No processing results found"
          exit 1
        fi
        
        echo "‚úÖ Fresh video generation completed successfully"
      timeout-minutes: 30
      env:
        NODE_ENV: production
        PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable
        DISPLAY: :99

    - name: Create workflow summary
      run: |
        echo "# üé¨ Video Generation Summary" > workflow-summary.md
        echo "" >> workflow-summary.md
        echo "**Generated at:** $(date -u)" >> workflow-summary.md
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "**Triggered by:** n8n via workflow_dispatch API" >> workflow-summary.md
          echo "**Business:** ${{ github.event.inputs.business_name }}" >> workflow-summary.md
          echo "**Industry:** ${{ github.event.inputs.industry }}" >> workflow-summary.md
          echo "**Template:** ${{ github.event.inputs.template }}" >> workflow-summary.md
          echo "**Workflow ID:** ${{ github.event.inputs.workflow_id }}" >> workflow-summary.md
        else
          echo "**Triggered by:** n8n via repository_dispatch" >> workflow-summary.md
        fi
        
        echo "" >> workflow-summary.md
        
        if [ -d "videos" ]; then
          VIDEO_COUNT=$(find videos -name "*.mp4" | wc -l)
          echo "**Videos generated:** $VIDEO_COUNT" >> workflow-summary.md
          echo "" >> workflow-summary.md
          
          if [ "$VIDEO_COUNT" -gt 0 ]; then
            echo "## üìπ Generated Videos:" >> workflow-summary.md
            find videos -name "*.mp4" | while read video; do
              size=$(ls -lh "$video" | awk '{print $5}')
              filename=$(basename "$video")
              echo "- \`$filename\` ($size)" >> workflow-summary.md
            done
          fi
        else
          echo "**Videos generated:** 0" >> workflow-summary.md
        fi
        
        cat workflow-summary.md

    - name: Commit and push fresh generated video
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Fetch latest changes
        echo "üì° Fetching latest changes..."
        git fetch origin main
        
        # Verify we have exactly 1 fresh video
        if [ -d "videos" ]; then
          VIDEO_COUNT=$(find videos -name "*.mp4" | wc -l)
          echo "üìä Found $VIDEO_COUNT video(s) to commit"
          if [ "$VIDEO_COUNT" -ne 1 ]; then
            echo "‚ö†Ô∏è Expected exactly 1 video, found $VIDEO_COUNT"
          fi
        fi
        
        # Add generated files
        git add videos/ || true
        git add workflow-summary.md || true
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è No changes to commit"
          exit 0
        fi
        
        echo "üíæ Committing fresh generated video..."
        
        # Create commit message based on trigger type
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          git commit -m "üé• Generated website video via workflow_dispatch

        Generated at: $(date -u)
        Triggered by: n8n workflow_dispatch API
        Business: ${{ github.event.inputs.business_name }}
        Industry: ${{ github.event.inputs.industry }}
        Template: ${{ github.event.inputs.template }}
        Workflow ID: ${{ github.event.inputs.workflow_id }}
        Videos: 1 fresh video (previous videos cleaned)"
        else
          git commit -m "üé• Generated fresh website video from n8n

        Generated at: $(date -u)
        Triggered by: n8n repository_dispatch
        Event type: generate_websites
        Videos: 1 fresh video (previous videos cleaned)"
        fi
        
        # Push with retry logic
        MAX_RETRIES=3
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "üì§ Push attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES..."
          
          if git push origin HEAD:main; then
            echo "‚úÖ Successfully pushed video to repository!"
            break
          else
            echo "‚ùå Push failed, syncing with remote..."
            RETRY_COUNT=$((RETRY_COUNT + 1))
            
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              # Reset and pull latest changes
              git reset --soft HEAD~1
              git stash push -m "Generated video from n8n"
              git pull --rebase origin main
              git stash pop || true
              
              # Re-add and commit with trigger-specific message
              git add videos/ workflow-summary.md || true
              
              if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                git commit -m "üé• Generated website video via workflow_dispatch (retry)

                Generated at: $(date -u)
                Triggered by: n8n workflow_dispatch API (retry $((RETRY_COUNT + 1)))
                Business: ${{ github.event.inputs.business_name }}
                Template: ${{ github.event.inputs.template }}
                Workflow ID: ${{ github.event.inputs.workflow_id }}" || {
                  echo "No changes to re-commit after rebase"
                  break
                }
              else
                git commit -m "üé• Generated website video from n8n

                Generated at: $(date -u)
                Triggered by: n8n repository_dispatch (retry $((RETRY_COUNT + 1)))" || {
                  echo "No changes to re-commit after rebase"
                  break
                }
              fi
              
              sleep 5
            else
              echo "‚ùå Max retries reached. Push failed."
              exit 1
            fi
          fi
        done

    - name: Upload video as artifact (backup)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ github.event_name == 'workflow_dispatch' && format('video-{0}-{1}-{2}', github.event.inputs.template, github.event.inputs.workflow_id, github.run_number) || format('generated-video-{0}', github.run_number) }}
        path: |
          videos/
          workflow-summary.md
        retention-days: 30 