name: Generate Website Videos

on:
  repository_dispatch:
    types: [generate_websites]

permissions:
  contents: write
  actions: read

jobs:
  generate-videos:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install system dependencies and Puppeteer requirements
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ffmpeg \
          wget \
          ca-certificates \
          fonts-liberation \
          libappindicator3-1 \
          libasound2t64 \
          libatk-bridge2.0-0 \
          libatk1.0-0 \
          libc6 \
          libcairo2 \
          libcups2 \
          libdbus-1-3 \
          libexpat1 \
          libfontconfig1 \
          libgcc-s1 \
          libgdk-pixbuf2.0-0 \
          libglib2.0-0 \
          libgtk-3-0 \
          libnspr4 \
          libnss3 \
          libpango-1.0-0 \
          libpangocairo-1.0-0 \
          libstdc++6 \
          libx11-6 \
          libx11-xcb1 \
          libxcb1 \
          libxcomposite1 \
          libxcursor1 \
          libxdamage1 \
          libxext6 \
          libxfixes3 \
          libxi6 \
          libxrandr2 \
          libxrender1 \
          libxss1 \
          libxtst6 \
          libxkbcommon0 \
          libdrm2 \
          libgbm1 \
          libpulse0 \
          libasound2-data \
          xdg-utils

    - name: Install Google Chrome
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Install Node.js dependencies
      run: npm install

    - name: Process website payload and create HTML files
      run: |
        echo "Processing payload..."
        echo "Payload: $PAYLOAD"
        
        # Ensure processing results file exists even if empty
        mkdir -p .github/scripts
        
        if [ -z "$PAYLOAD" ] || [ "$PAYLOAD" = "null" ]; then
          echo "No payload provided, creating empty processing results"
          echo "[]" > .github/scripts/processing-results.json
        else
          node .github/scripts/process-payload.js
        fi
        
        # Verify processing results file exists
        if [ ! -f ".github/scripts/processing-results.json" ]; then
          echo "Creating empty processing results file as fallback"
          echo "[]" > .github/scripts/processing-results.json
        fi
        
        echo "Processing results:"
        cat .github/scripts/processing-results.json
      env:
        PAYLOAD: ${{ toJson(github.event.client_payload) }}
        NODE_ENV: production

    - name: Setup Xvfb for headless display
      run: |
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        sleep 3

    - name: Create videos directory
      run: |
        mkdir -p videos
        ls -la videos/
        echo "Videos directory created"

    - name: Start video generation server
      run: |
        echo "Starting server..."
        echo "Environment variables:"
        echo "NODE_ENV: $NODE_ENV"
        echo "PUPPETEER_EXECUTABLE_PATH: $PUPPETEER_EXECUTABLE_PATH"
        echo "DISPLAY: $DISPLAY"
        
        # Start server with output logging
        npm start > server.log 2>&1 &
        SERVER_PID=$!
        echo $SERVER_PID > server.pid
        echo "Server PID: $SERVER_PID"
        
        # Wait for server to start and verify it's running
        echo "Waiting for server to start..."
        sleep 15
        
        # Show server log for debugging
        echo "Server log (first 20 lines):"
        head -20 server.log || echo "No server log available"
        
        # Check if server is responding
        for i in {1..10}; do
          if curl -f http://localhost:3000/health; then
            echo "✅ Server is running and responding!"
            curl http://localhost:3000/health
            break
          else
            echo "⏳ Attempt $i: Server not ready yet, waiting 5 seconds..."
            echo "Current server log:"
            tail -10 server.log || echo "No recent server log"
            sleep 5
            if [ $i -eq 10 ]; then
              echo "❌ Server failed to start properly"
              echo "Full server log:"
              cat server.log || echo "No server log available"
              # Check server logs
              echo "Checking if server process is still running..."
              if ps -p $SERVER_PID > /dev/null; then
                echo "Server process is running but not responding to health check"
              else
                echo "Server process has died"
              fi
              exit 1
            fi
          fi
        done
      env:
        NODE_ENV: production
        PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable
        DISPLAY: :99
        VIDEO_METHOD: screenshot

    - name: Generate videos from created websites
      run: |
        echo "🎬 Starting video generation..."
        
        # Verify server is still running
        if ! curl -f http://localhost:3000/health; then
          echo "❌ Server is not responding, cannot generate videos"
          exit 1
        fi
        
        # Check if processing results file has content
        if [ -f ".github/scripts/processing-results.json" ]; then
          WEBSITE_COUNT=$(jq length .github/scripts/processing-results.json)
          echo "Found $WEBSITE_COUNT websites to process"
          
          if [ "$WEBSITE_COUNT" -gt 0 ]; then
            echo "📊 Processing results content:"
            cat .github/scripts/processing-results.json | jq '.'
            
            echo "🚀 Running video generation script..."
            node .github/scripts/generate-videos.js
            
            echo "📁 Checking generated videos..."
            if [ -d "videos" ]; then
              echo "Videos directory contents:"
              ls -la videos/
              VIDEO_COUNT=$(find videos -name "*.mp4" -o -name "*.webm" | wc -l)
              echo "Generated $VIDEO_COUNT video files"
              if [ "$VIDEO_COUNT" -gt 0 ]; then
                echo "✅ Video generation successful!"
                find videos -name "*.mp4" -o -name "*.webm" -exec ls -lh {} \;
              else
                echo "⚠️ No video files found after generation"
              fi
            else
              echo "❌ Videos directory not found"
            fi
          else
            echo "No websites to process, skipping video generation"
            # Create empty generation results
            echo '{"timestamp":"'$(date -u)'","totalWebsites":0,"successful":0,"failed":0,"results":[]}' > .github/scripts/generation-results.json
          fi
        else
          echo "No processing results found, skipping video generation"
          echo '{"timestamp":"'$(date -u)'","totalWebsites":0,"successful":0,"failed":0,"results":[]}' > .github/scripts/generation-results.json
        fi
        
        echo "✅ Video generation step completed"
      timeout-minutes: 45
      env:
        NODE_ENV: production
        PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable
        DISPLAY: :99

    - name: Stop server
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

    - name: Create workflow summary
      run: |
        echo "📊 Video Generation Summary" > workflow-summary.txt
        echo "Generated at: $(date -u)" >> workflow-summary.txt
        echo "Triggered by: repository_dispatch event" >> workflow-summary.txt
        echo "" >> workflow-summary.txt
        
        # Count generated files
        if [ -d "websites" ]; then
          echo "🌐 Website files: $(find websites -name "*.html" | wc -l)" >> workflow-summary.txt
        fi
        
        if [ -d "videos" ]; then
          echo "🎬 Video files: $(find videos -name "*.mp4" -o -name "*.webm" | wc -l)" >> workflow-summary.txt
          echo "" >> workflow-summary.txt
          echo "📹 Generated videos:" >> workflow-summary.txt
          find videos -name "*.mp4" -o -name "*.webm" | sort >> workflow-summary.txt
        fi
        
        cat workflow-summary.txt

    - name: Commit and push generated files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Fetch latest changes from remote
        echo "Fetching latest changes from remote..."
        git fetch origin main
        
        # Add all new files and results
        git add websites/ || true
        git add videos/ || true
        git add .github/scripts/*.json || true
        git add workflow-summary.txt || true
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        echo "Changes detected, preparing to commit and push..."
        
        # Create commit
        git commit -m "🎬 Auto-generated website videos from n8n workflow

        Generated at: $(date -u)
        Triggered by: repository_dispatch event
        Event type: generate_websites"
        
        # Attempt to push with retry logic
        MAX_RETRIES=3
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "Push attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES..."
          
          if git push origin HEAD:main; then
            echo "✅ Successfully pushed changes!"
            break
          else
            echo "❌ Push failed, attempting to sync with remote..."
            RETRY_COUNT=$((RETRY_COUNT + 1))
            
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              # Pull latest changes and rebase our commit
              echo "Pulling latest changes and rebasing..."
              
              # Reset to before our commit, pull latest, then reapply our changes
              git reset --soft HEAD~1
              git stash push -m "Generated files from workflow"
              
              # Pull latest changes
              git pull --rebase origin main
              
              # Apply our changes back
              git stash pop || {
                echo "Stash pop failed, manually applying changes..."
                git add websites/ videos/ .github/scripts/*.json workflow-summary.txt || true
              }
              
              # Re-commit our changes
              git add websites/ videos/ .github/scripts/*.json workflow-summary.txt || true
              git commit -m "🎬 Auto-generated website videos from n8n workflow

              Generated at: $(date -u)
              Triggered by: repository_dispatch event
              Event type: generate_websites (retry $((RETRY_COUNT + 1)))" || {
                echo "No changes to re-commit after rebase"
                break
              }
              
              echo "Waiting 5 seconds before retry..."
              sleep 5
            else
              echo "❌ Max retries reached. Push failed."
              echo "Repository may have been updated during workflow execution."
              echo "Generated files are still available as artifacts."
              exit 1
            fi
          fi
        done

    - name: Debug - List all generated files
      if: always()
      run: |
        echo "🔍 Final file listing for debugging:"
        echo "Current directory:"
        ls -la
        echo ""
        if [ -d "videos" ]; then
          echo "Videos directory:"
          ls -la videos/
          echo "Video file details:"
          find videos -name "*.mp4" -o -name "*.webm" -exec ls -lh {} \; || echo "No video files found"
        else
          echo "❌ Videos directory does not exist"
        fi
        echo ""
        if [ -d "websites" ]; then
          echo "Websites directory:"
          find websites -name "*.html" -exec ls -lh {} \; || echo "No HTML files found"
        else
          echo "❌ Websites directory does not exist"
        fi

    - name: Upload artifacts (backup)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: generated-videos-${{ github.run_number }}
        path: |
          videos/
          websites/
          .github/scripts/*.json
          workflow-summary.txt
        retention-days: 30 